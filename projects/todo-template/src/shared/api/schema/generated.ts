/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    search?: string;
                    sort?: "createdAt" | "completed" | "priority";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated tasks list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TasksList"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        text: string;
                        /** @default false */
                        completed?: boolean;
                    };
                };
            };
            responses: {
                /** @description Task created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All tasks deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID задачи */
                    taskId: components["parameters"]["taskId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID задачи */
                    taskId: components["parameters"]["taskId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID задачи */
                    taskId: components["parameters"]["taskId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        text?: string;
                        completed?: boolean;
                    };
                };
            };
            responses: {
                /** @description Task updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Task: {
            /** Format: uuid */
            id: string;
            text: string;
            /** @default false */
            completed: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string | null;
        };
        TasksList: {
            list: components["schemas"]["Task"][];
            total: number;
            totalPages: number;
            currentPage?: number;
        };
        Error: {
            message: string;
            code: string;
        };
    };
    responses: {
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Bad request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description ID задачи */
        taskId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
